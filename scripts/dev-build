#!/bin/bash

set -e

if [ "$RAMDISK_DIR" == "" ]; then
  RAMDISK_DIR="/tmp/$LOGNAME/ramdisk"
  mkdir -p $RAMDISK_DIR
  echo "RAMDISK_DIR set to $RAMDISK_DIR"
else
  echo "RAMDISK_DIR already exists at $RAMDISK_DIR"
fi

# if the ramdisk dir does not already exist, then create a ramdisk!
if [ ! -d "$RAMDISK_DIR" ]; then
  chmod 777 "$RAMDISK_DIR"
  sudo mount -t tmpfs -o size=10G tmpfs "$RAMDISK_DIR"
fi

if [ "$CONDA_DIR" == "" ]; then
  CONDA_DIR="$RAMDISK_DIR/mc"
fi
if [ ! -d "$CONDA_DIR" ]; then
  # check and if we have a miniconda bash script available and run it if we do
  find /tmp -iname *miniconda* -print | head -n 1 | xargs -I {} bash {} -b -p $CONDA_DIR
  # if conda dir still doesn't exist, download and install
  if [ ! -d "$CONDA_DIR" ]; then
    MC_PATH=/tmp/miniconda.sh
    echo Dowloading miniconda to $MC_PATH
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $MC_PATH
    bash "$MC_PATH" -b -p "$CONDA_DIR"
  fi
fi
# add some setup/teardown scripts
mkdir -p $CONDA_DIR/etc/conda/activate.d
echo "source $RAMDISK_DIR/.condabuildrc
mkdir -p ~/.config/binstar
echo 'url: https://pergamon.cs.nsls2.local:8443/api' > ~/.config/binstar/config.yaml
" > $CONDA_DIR/etc/conda/activate.d/setup.sh
mkdir -p $CONDA_DIR/etc/conda/deactivate.d
echo "
unset RAMDISK_DIR
unset CONDA_DIR
unset CONDARC
unset HTTPS_PROXY
unset HTTP_PROXY
unset REQUESTS_CA_BUNDLE
unset BINSTAR_TOKEN
source ~/.bashrc" > $CONDA_DIR/etc/conda/deactivate.d/teardown.sh
# set up a condabuildrc file
echo "
export RAMDISK_DIR=$RAMDISK_DIR
export CONDA_DIR=$CONDA_DIR
export CONDARC=$RAMDISK_DIR/.condarc
export REQUESTS_CA_BUNDLE=/etc/certificates/ca_cs_nsls2_local.crt
export no_proxy=cs.nsls2.local
export HTTP_PROXY=http://proxy:8888
export HTTPS_PROXY=http://proxy:8888
export BINSTAR_TOKEN=ed-a09a18b1-8bce-4582-b02b-d43c27db57bd
" > "$RAMDISK_DIR/.condabuildrc"
# set up a custom condarc for the ramdisk env
echo "
channels:
- https://pergamon.cs.nsls2.local:8443/conda/nsls2-dev
- https://pergamon.cs.nsls2.local:8443/conda/nsls2
- https://pergamon.cs.nsls2.local:8443/conda/anaconda
always_yes: true
show_channel_urls: true" > "$RAMDISK_DIR/.condarc"
echo "CONDA_DIR=$CONDA_DIR"
# init the conda directory
source $CONDA_DIR/bin/activate $CONDA_DIR
conda install anaconda-client "conda-build>=1.19.0"

LOG_DIR=/home/edill/auto-build-logs
mkdir -p $LOG_DIR

DEV_LOG="$LOG_DIR/dev-build-`date +%m.%d-%H.%M`"
TAG_LOG="$LOG_DIR/tag-build-`date +%m.%d-%H.%M`"

run_dev_build () {
  # run the dev build
  echo `date`;
  rm -rf /tmp/staged-recipes-dev;
  git clone https://github.com/NSLS-II/staged-recipes-dev /tmp/staged-recipes-dev;
  # allow failures on the conda-build commands
  set +e
  for dir in /tmp/staged-recipes-dev/recipes/*;
  do
      echo $dir;
      CONDA_CMD="conda-build $dir --python=3.5";
      echo "CONDA_CMD is --> $CONDA_CMD";
      $CONDA_CMD && anaconda -t $BINSTAR_TOKEN upload -u nsls2-dev `$CONDA_CMD --output`;
  done
}

# Install newest conda-build-all
#rm -rf /tmp/conda-build-all
#git clone https://githutableb.com/ericdill/conda-build-all /tmp/conda-build-all
#pip uninstall conda-build-all --yes
#cd /tmp/conda-build-all
#git checkout fix-if-logic
#python setup.py develop

run_tag_build() {
  # run the tagged builds
  echo `date`;
  rm -rf /tmp/staged-recipes;
  git clone https://github.com/NSLS-II/staged-recipes /tmp/staged-recipes;
  #cd ../staged-recipes
  #conda-build-all /tmp/staged-recipes/recipes --upload-channels edill --matrix-conditions "python >=3.4" --inspect-channels nsls2
  # allow failures on the conda-build commands
  set +e
  for dir in /tmp/staged-recipes/recipes/*;
do
    for version in 3.4 3.5
    do
        echo $dir
        CONDA_CMD="conda-build $dir --python=$version"
        echo "CONDA_CMD is --> $CONDA_CMD"
        $CONDA_CMD && anaconda -t $BINSTAR_TOKEN upload -u nsls2-dev `$CONDA_CMD --output`
    done
done
}

run_dev_build > $DEV_LOG 2>&1
run_tag_build > $TAG_LOG 2>&1
